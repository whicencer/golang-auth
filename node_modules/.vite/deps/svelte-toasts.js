import {
  flip
} from "./chunk-6HOGEOQT.js";
import {
  tweened
} from "./chunk-P7CL3OSW.js";
import {
  fade,
  fly
} from "./chunk-O642WJ7Z.js";
import "./chunk-M6MB33T7.js";
import {
  writable
} from "./chunk-ADM3CLVU.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  add_render_callback,
  add_transform,
  append_dev,
  append_styles,
  attr_dev,
  check_outros,
  component_subscribe,
  construct_svelte_component_dev,
  create_animation,
  create_component,
  create_in_transition,
  create_out_transition,
  create_slot,
  destroy_component,
  destroy_each,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  fix_and_outro_and_destroy_block,
  fix_position,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_store_value,
  group_outros,
  identity,
  init,
  insert_dev,
  listen_dev,
  mount_component,
  noop,
  onMount,
  prop_dev,
  run_all,
  safe_not_equal,
  set_data_dev,
  set_style,
  space,
  svg_element,
  text,
  toggle_class,
  transition_in,
  transition_out,
  update_keyed_each,
  update_slot_base,
  validate_each_argument,
  validate_each_keys,
  validate_slots,
  validate_store
} from "./chunk-3PEI35UK.js";

// node_modules/svelte-toasts/src/toasts.js
function notificationsStore(initialValue = []) {
  const store = writable(initialValue);
  const { set, update, subscribe } = store;
  let defaultOptions = {
    duration: 3e3,
    placement: "bottom-right",
    type: "info",
    theme: "dark"
  };
  function add(options) {
    const {
      duration = 3e3,
      placement = "bottom-right",
      type = "info",
      theme = "dark",
      ...rest
    } = { ...defaultOptions, ...options };
    const uid = Date.now();
    const obj = {
      ...rest,
      uid,
      placement,
      type,
      theme,
      duration,
      remove: () => {
        update((v) => v.filter((i) => i.uid !== uid));
      },
      update: (data) => {
        var _a;
        delete data.uid;
        const index = (_a = get_store_value(store)) == null ? void 0 : _a.findIndex((v) => (v == null ? void 0 : v.uid) === uid);
        if (index > -1) {
          update((v) => [
            ...v.slice(0, index),
            { ...v[index], ...data },
            ...v.slice(index + 1)
          ]);
        }
      }
    };
    update((v) => [...v, obj]);
    if (duration > 0) {
      setTimeout(() => {
        obj.remove();
        if (typeof obj.onRemove === "function")
          obj.onRemove();
      }, duration);
    }
    return obj;
  }
  function getById(uid) {
    var _a;
    return (_a = get_store_value(store)) == null ? void 0 : _a.find((v) => (v == null ? void 0 : v.uid) === uid);
  }
  function clearAll() {
    set([]);
  }
  function clearLast() {
    update((v) => {
      return v.slice(0, v.length - 1);
    });
  }
  function setDefaults(options) {
    defaultOptions = { ...defaultOptions, ...options };
  }
  return {
    subscribe,
    add,
    success: getHelper("success", add),
    info: getHelper("info", add),
    error: getHelper("error", add),
    warning: getHelper("warning", add),
    clearAll,
    clearLast,
    getById,
    setDefaults
  };
}
var toasts = notificationsStore([]);
var toasts_default = toasts;
function getHelper(type, add) {
  return function() {
    if (typeof arguments[0] === "object") {
      const options = arguments[0];
      return add({ ...options, type });
    } else if (typeof arguments[0] === "string" && typeof arguments[1] === "string") {
      const options = arguments[2] || {};
      return add({
        ...options,
        type,
        title: arguments[0],
        description: arguments[1]
      });
    } else if (typeof arguments[0] === "string") {
      const options = arguments[1] || {};
      return add({
        ...options,
        type,
        description: arguments[0]
      });
    }
  };
}

// node_modules/svelte-toasts/src/ToastContainer.svelte
var file = "node_modules\\svelte-toasts\\src\\ToastContainer.svelte";
function add_css(target) {
  append_styles(target, "svelte-1rg6zyw", "ul.svelte-1rg6zyw.svelte-1rg6zyw{list-style:none;margin:0;padding:0}li.svelte-1rg6zyw.svelte-1rg6zyw{display:flex;justify-content:space-between;align-items:center;margin-bottom:10px}.toast-container.svelte-1rg6zyw.svelte-1rg6zyw{z-index:9999;position:fixed;padding:4px;box-sizing:border-box;color:#fff;width:max-content;max-width:100%;pointer-events:none}.toast-container.bottom-right.svelte-1rg6zyw.svelte-1rg6zyw{bottom:1em;right:1em}.toast-container.bottom-left.svelte-1rg6zyw.svelte-1rg6zyw{bottom:1em;left:1em}.toast-container.top-left.svelte-1rg6zyw.svelte-1rg6zyw{top:1em;left:1em}.toast-container.top-right.svelte-1rg6zyw.svelte-1rg6zyw{top:1em;right:1em}.toast-container.top-center.svelte-1rg6zyw.svelte-1rg6zyw{top:1em;right:50%;left:50%;transform:translate(-50%, 0)}.toast-container.bottom-center.svelte-1rg6zyw.svelte-1rg6zyw{bottom:1em;right:50%;left:50%;transform:translate(-50%, 0)}.toast-container.center-center.svelte-1rg6zyw.svelte-1rg6zyw{top:50%;right:50%;left:50%;transform:translate(-50%, -50%)}.toast-container.svelte-1rg6zyw>.svelte-1rg6zyw:not(:last-child){margin-bottom:10px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9hc3RDb250YWluZXIuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQW9IRSxnQ0FBRyxDQUNELFVBQVUsQ0FBRSxJQUFJLENBQ2hCLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQ1gsQ0FDQSxnQ0FBRyxDQUNELE9BQU8sQ0FBRSxJQUFJLENBQ2IsZUFBZSxDQUFFLGFBQWEsQ0FDOUIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsYUFBYSxDQUFFLElBQ2pCLENBQ0EsOENBQWlCLENBQ2YsT0FBTyxDQUFFLElBQUksQ0FDYixRQUFRLENBQUUsS0FBSyxDQUNmLE9BQU8sQ0FBRSxHQUFHLENBQ1osVUFBVSxDQUFFLFVBQVUsQ0FDdEIsS0FBSyxDQUFFLElBQUksQ0FDWCxLQUFLLENBQUUsV0FBVyxDQUNsQixTQUFTLENBQUUsSUFBSSxDQUNmLGNBQWMsQ0FBRSxJQUNsQixDQUNBLGdCQUFnQiwyQ0FBYyxDQUM1QixNQUFNLENBQUUsR0FBRyxDQUNYLEtBQUssQ0FBRSxHQUNULENBQ0EsZ0JBQWdCLDBDQUFhLENBQzNCLE1BQU0sQ0FBRSxHQUFHLENBQ1gsSUFBSSxDQUFFLEdBQ1IsQ0FDQSxnQkFBZ0IsdUNBQVUsQ0FDeEIsR0FBRyxDQUFFLEdBQUcsQ0FDUixJQUFJLENBQUUsR0FDUixDQUNBLGdCQUFnQix3Q0FBVyxDQUN6QixHQUFHLENBQUUsR0FBRyxDQUNSLEtBQUssQ0FBRSxHQUNULENBQ0EsZ0JBQWdCLHlDQUFZLENBQzFCLEdBQUcsQ0FBRSxHQUFHLENBQ1IsS0FBSyxDQUFFLEdBQUcsQ0FDVixJQUFJLENBQUUsR0FBRyxDQUNULFNBQVMsQ0FBRSxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDOUIsQ0FDQSxnQkFBZ0IsNENBQWUsQ0FDN0IsTUFBTSxDQUFFLEdBQUcsQ0FDWCxLQUFLLENBQUUsR0FBRyxDQUNWLElBQUksQ0FBRSxHQUFHLENBQ1QsU0FBUyxDQUFFLFVBQVUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUM5QixDQUNBLGdCQUFnQiw0Q0FBZSxDQUM3QixHQUFHLENBQUUsR0FBRyxDQUNSLEtBQUssQ0FBRSxHQUFHLENBQ1YsSUFBSSxDQUFFLEdBQUcsQ0FDVCxTQUFTLENBQUUsVUFBVSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ2pDLENBQ0EsK0JBQWdCLGdCQUFHLEtBQUssV0FBVyxDQUFFLENBQ25DLGFBQWEsQ0FBRSxJQUNqQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJUb2FzdENvbnRhaW5lci5zdmVsdGUiXX0= */");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[1] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i];
  return child_ctx;
}
var get_default_slot_changes = (dirty) => ({ data: dirty & /*$toasts*/
4 });
var get_default_slot_context = (ctx) => ({ data: (
  /*toast*/
  ctx[14]
) });
function create_else_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, $toasts*/
        516)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(107:10) {:else}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = (
    /*toast*/
    ctx[14].component
  );
  function switch_props(ctx2) {
    return {
      props: { data: (
        /*toast*/
        ctx2[14]
      ) },
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const switch_instance_changes = {};
      if (dirty & /*$toasts*/
      4)
        switch_instance_changes.data = /*toast*/
        ctx2[14];
      if (dirty & /*$toasts*/
      4 && switch_value !== (switch_value = /*toast*/
      ctx2[14].component)) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(switch_instance_anchor);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(105:10) {#if toast.component}",
    ctx
  });
  return block;
}
function create_each_block_1(key_1, ctx) {
  let li;
  let current_block_type_index;
  let if_block;
  let t;
  let li_intro;
  let li_outro;
  let rect;
  let stop_animation = noop;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*toast*/
      ctx2[14].component
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      li = element("li");
      if_block.c();
      t = space();
      attr_dev(li, "class", "svelte-1rg6zyw");
      add_location(li, file, 99, 8, 2256);
      this.first = li;
    },
    m: function mount(target, anchor) {
      insert_dev(target, li, anchor);
      if_blocks[current_block_type_index].m(li, null);
      append_dev(li, t);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(li, t);
      }
    },
    r: function measure() {
      rect = li.getBoundingClientRect();
    },
    f: function fix() {
      fix_position(li);
      stop_animation();
      add_transform(li, rect);
    },
    a: function animate() {
      stop_animation();
      stop_animation = create_animation(li, rect, flip, {});
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      add_render_callback(() => {
        if (!current)
          return;
        if (li_outro)
          li_outro.end(1);
        li_intro = create_in_transition(li, fade, { duration: 500 });
        li_intro.start();
      });
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      if (li_intro)
        li_intro.invalidate();
      li_outro = create_out_transition(li, fly, {
        y: (
          /*flyMap*/
          ctx[4][
            /*toast*/
            ctx[14].placement
          ]
        ),
        duration: 1e3
      });
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(li);
      if_blocks[current_block_type_index].d();
      if (detaching && li_outro)
        li_outro.end();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_1.name,
    type: "each",
    source: "(97:6) {#each $toasts         .filter((n) => n.placement === placement)         .reverse() as toast (toast.uid)}",
    ctx
  });
  return block;
}
function create_each_block(ctx) {
  let div;
  let ul;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let t;
  let div_class_value;
  let current;
  function func(...args) {
    return (
      /*func*/
      ctx[11](
        /*placement*/
        ctx[1],
        ...args
      )
    );
  }
  let each_value_1 = (
    /*$toasts*/
    ctx[2].filter(func).reverse()
  );
  validate_each_argument(each_value_1);
  const get_key = (ctx2) => (
    /*toast*/
    ctx2[14].uid
  );
  validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_1(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
  }
  const block = {
    c: function create() {
      div = element("div");
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t = space();
      attr_dev(ul, "class", "svelte-1rg6zyw");
      add_location(ul, file, 95, 4, 2131);
      attr_dev(div, "class", div_class_value = "toast-container " + /*placement*/
      ctx[1] + " svelte-1rg6zyw");
      set_style(
        div,
        "width",
        /*width*/
        ctx[0]
      );
      add_location(div, file, 94, 2, 2062);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, ul);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul, null);
        }
      }
      append_dev(div, t);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*flyMap, $toasts, placements, $$scope*/
      540) {
        each_value_1 = /*$toasts*/
        ctx[2].filter(func).reverse();
        validate_each_argument(each_value_1);
        group_outros();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block_1, null, get_each_context_1);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        check_outros();
      }
      if (!current || dirty & /*width*/
      1) {
        set_style(
          div,
          "width",
          /*width*/
          ctx[0]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(94:0) {#each placements as placement}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let each_1_anchor;
  let current;
  let each_value = (
    /*placements*/
    ctx[3]
  );
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert_dev(target, each_1_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*placements, width, $toasts, flyMap, $$scope*/
      541) {
        each_value = /*placements*/
        ctx2[3];
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach_dev(each_1_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let $toasts;
  validate_store(toasts_default, "toasts");
  component_subscribe($$self, toasts_default, ($$value) => $$invalidate(2, $toasts = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ToastContainer", slots, ["default"]);
  let { theme = "dark" } = $$props;
  let { placement = "bottom-right" } = $$props;
  let { type = "info" } = $$props;
  let { showProgress = false } = $$props;
  let { duration = 3e3 } = $$props;
  let { width = "320px" } = $$props;
  const placements = [
    "bottom-right",
    "bottom-left",
    "top-right",
    "top-left",
    "top-center",
    "bottom-center",
    "center-center"
  ];
  const flyMap = {
    "bottom-right": 400,
    "top-right": -400,
    "bottom-left": 400,
    "top-left": -400,
    "bottom-center": 400,
    "top-center": -400,
    "center-center": -800
  };
  onMount(() => {
    toasts_default.setDefaults({
      placement,
      showProgress,
      theme,
      duration,
      type
    });
  });
  const writable_props = ["theme", "placement", "type", "showProgress", "duration", "width"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ToastContainer> was created with unknown prop '${key}'`);
  });
  const func = (placement2, n) => n.placement === placement2;
  $$self.$$set = ($$props2) => {
    if ("theme" in $$props2)
      $$invalidate(5, theme = $$props2.theme);
    if ("placement" in $$props2)
      $$invalidate(1, placement = $$props2.placement);
    if ("type" in $$props2)
      $$invalidate(6, type = $$props2.type);
    if ("showProgress" in $$props2)
      $$invalidate(7, showProgress = $$props2.showProgress);
    if ("duration" in $$props2)
      $$invalidate(8, duration = $$props2.duration);
    if ("width" in $$props2)
      $$invalidate(0, width = $$props2.width);
    if ("$$scope" in $$props2)
      $$invalidate(9, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    fly,
    fade,
    onMount,
    flip,
    toasts: toasts_default,
    theme,
    placement,
    type,
    showProgress,
    duration,
    width,
    placements,
    flyMap,
    $toasts
  });
  $$self.$inject_state = ($$props2) => {
    if ("theme" in $$props2)
      $$invalidate(5, theme = $$props2.theme);
    if ("placement" in $$props2)
      $$invalidate(1, placement = $$props2.placement);
    if ("type" in $$props2)
      $$invalidate(6, type = $$props2.type);
    if ("showProgress" in $$props2)
      $$invalidate(7, showProgress = $$props2.showProgress);
    if ("duration" in $$props2)
      $$invalidate(8, duration = $$props2.duration);
    if ("width" in $$props2)
      $$invalidate(0, width = $$props2.width);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    width,
    placement,
    $toasts,
    placements,
    flyMap,
    theme,
    type,
    showProgress,
    duration,
    $$scope,
    slots,
    func
  ];
}
var ToastContainer = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        theme: 5,
        placement: 1,
        type: 6,
        showProgress: 7,
        duration: 8,
        width: 0
      },
      add_css
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ToastContainer",
      options,
      id: create_fragment.name
    });
  }
  get theme() {
    throw new Error("<ToastContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set theme(value) {
    throw new Error("<ToastContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get placement() {
    throw new Error("<ToastContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set placement(value) {
    throw new Error("<ToastContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get type() {
    throw new Error("<ToastContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set type(value) {
    throw new Error("<ToastContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get showProgress() {
    throw new Error("<ToastContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set showProgress(value) {
    throw new Error("<ToastContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get duration() {
    throw new Error("<ToastContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set duration(value) {
    throw new Error("<ToastContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get width() {
    throw new Error("<ToastContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set width(value) {
    throw new Error("<ToastContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ToastContainer_default = ToastContainer;

// node_modules/svelte-toasts/src/BootstrapToast.svelte
var file2 = "node_modules\\svelte-toasts\\src\\BootstrapToast.svelte";
function add_css2(target) {
  append_styles(target, "svelte-1t011t6", ".st-toast.svelte-1t011t6.svelte-1t011t6{width:100%;pointer-events:auto;cursor:pointer;z-index:10000;max-width:100%;font-size:0.875rem;pointer-events:auto;background-color:rgba(255, 255, 255, 0.85);background-clip:padding-box;border:1px solid rgba(0, 0, 0, 0.1);box-shadow:0 0.5rem 1rem rgba(0, 0, 0, 0.15);border-radius:0.25rem}.st-toast.success.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(22, 163, 74);color:#fff}.st-toast.info.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(2, 132, 199);color:#fff}.st-toast.error.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(225, 29, 72);color:#fff}.st-toast.warning.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(202, 138, 4);color:#fff}.st-toast.dark.svelte-1t011t6.svelte-1t011t6{color:#fff;background:#393939}.st-toast.dark.svelte-1t011t6 .st-toast-close-btn svg.svelte-1t011t6{fill:#fff}.st-toast.dark.svelte-1t011t6 .st-toast-close-btn.svelte-1t011t6:focus{border:solid 1px #fff;border-radius:3px}.st-toast.dark.svelte-1t011t6 .st-toast-close-btn.svelte-1t011t6:focus:focus{border-color:#fff;outline:none}.st-toast.dark.success.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(22, 163, 74);color:#fff}.st-toast.dark.success.svelte-1t011t6 .st-toast-header.svelte-1t011t6{border-bottom:solid 1px #fff}.st-toast.dark.info.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(2, 132, 199);color:#fff}.st-toast.dark.info.svelte-1t011t6 .st-toast-header.svelte-1t011t6{border-bottom:solid 1px #fff}.st-toast.dark.error.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(225, 29, 72);color:#fff}.st-toast.dark.error.svelte-1t011t6 .st-toast-header.svelte-1t011t6{border-bottom:solid 1px #fff}.st-toast.dark.warning.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(202, 138, 4);color:#fff}.st-toast.dark.warning.svelte-1t011t6 .st-toast-header.svelte-1t011t6{border-bottom:solid 1px #fff}.st-toast.light.svelte-1t011t6.svelte-1t011t6{color:#161616}.st-toast.light.svelte-1t011t6 .st-toast-close-btn svg.svelte-1t011t6{color:#161616}.st-toast.light.svelte-1t011t6 .st-toast-close-btn.svelte-1t011t6:focus{border:solid 1px #fff;border-radius:3px}.st-toast.light.svelte-1t011t6 .st-toast-close-btn.svelte-1t011t6:focus:focus{border-color:#fff;outline:none}.st-toast.light.success.svelte-1t011t6.svelte-1t011t6{border-color:rgb(22, 163, 74);background:rgba(22, 163, 74, 0.2)}.st-toast.light.success.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(22, 163, 74);color:#fff}.st-toast.light.success.svelte-1t011t6 .st-toast-header.svelte-1t011t6{border-bottom:1px solid rgb(22, 163, 74)}.st-toast.light.info.svelte-1t011t6.svelte-1t011t6{border-color:rgb(2, 132, 199);background:rgba(2, 132, 199, 0.2)}.st-toast.light.info.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(2, 132, 199);color:#fff}.st-toast.light.info.svelte-1t011t6 .st-toast-header.svelte-1t011t6{border-bottom:1px solid rgb(2, 132, 199)}.st-toast.light.error.svelte-1t011t6.svelte-1t011t6{border-color:rgb(225, 29, 72);background:rgba(225, 29, 72, 0.2)}.st-toast.light.error.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(225, 29, 72);color:#fff}.st-toast.light.error.svelte-1t011t6 .st-toast-header.svelte-1t011t6{border-bottom:1px solid rgb(225, 29, 72)}.st-toast.light.warning.svelte-1t011t6.svelte-1t011t6{border-color:rgb(202, 138, 4);background:rgba(202, 138, 4, 0.2)}.st-toast.light.warning.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{fill:rgb(202, 138, 4);color:#fff}.st-toast.light.warning.svelte-1t011t6 .st-toast-header.svelte-1t011t6{border-bottom:1px solid rgb(202, 138, 4)}.st-toast-header.svelte-1t011t6.svelte-1t011t6{display:flex;align-items:center;align-items:center;padding:0.5rem 0.75rem;background-clip:padding-box;border-top-left-radius:calc(0.25rem - 1px);border-top-right-radius:calc(0.25rem - 1px)}.st-toast-header.svelte-1t011t6 .st-toast-title.svelte-1t011t6{flex:1;text-align:left;margin-left:0.5rem;outline:none}.st-toast-header.svelte-1t011t6 .st-toast-close-btn.svelte-1t011t6{margin-right:-0.375rem;margin-left:0.75rem;background:transparent;border:0}.st-toast-body.svelte-1t011t6.svelte-1t011t6{position:relative;padding:0.75rem 2rem 0.75rem 2rem;word-wrap:break-word;text-align:left}.st-toast-body.st-toast-no-title.svelte-1t011t6.svelte-1t011t6{padding-left:0.75rem}.st-toast-body.st-toast-no-title.svelte-1t011t6 .st-toast-icon.svelte-1t011t6{display:inline-block;position:relative;top:-1px}.st-toast-body.st-toast-no-title.svelte-1t011t6 .st-toast-description.svelte-1t011t6{margin-left:0.5rem}.st-toast-body.svelte-1t011t6 .st-toast-close-btn.svelte-1t011t6{position:absolute;right:10px;top:13px}.st-toast-body.svelte-1t011t6 .st-toast-close-btn.svelte-1t011t6:focus{border-color:#fff}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUcsQ0FDbkMsQ0FDQSxTQUFTLE1BQU0sdUJBQVEsQ0FBQyw2QkFBZSxDQUNyQyxJQUFJLENBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDdEIsS0FBSyxDQUFFLElBQ1QsQ0FDQSxTQUFTLE1BQU0sdUJBQVEsQ0FBQywrQkFBaUIsQ0FDdkMsYUFBYSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQzFDLENBQ0EsOENBQWlCLENBQ2YsT0FBTyxDQUFFLElBQUksQ0FDYixXQUFXLENBQUUsTUFBTSxDQUNuQixXQUFXLENBQUUsTUFBTSxDQUNuQixPQUFPLENBQUUsTUFBTSxDQUFDLE9BQU8sQ0FDdkIsZUFBZSxDQUFFLFdBQVcsQ0FDNUIsc0JBQXNCLENBQUUsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUMzQyx1QkFBdUIsQ0FBRSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUM3QyxDQUNBLCtCQUFnQixDQUFDLDhCQUFnQixDQUMvQixJQUFJLENBQUUsQ0FBQyxDQUNQLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLE9BQU8sQ0FBRSxJQUNYLENBQ0EsK0JBQWdCLENBQUMsa0NBQW9CLENBQ25DLFlBQVksQ0FBRSxTQUFTLENBQ3ZCLFdBQVcsQ0FBRSxPQUFPLENBQ3BCLFVBQVUsQ0FBRSxXQUFXLENBQ3ZCLE1BQU0sQ0FBRSxDQUNWLENBQ0EsNENBQWUsQ0FDYixRQUFRLENBQUUsUUFBUSxDQUNsQixPQUFPLENBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNsQyxTQUFTLENBQUUsVUFBVSxDQUNyQixVQUFVLENBQUUsSUFDZCxDQUNBLGNBQWMsZ0RBQW1CLENBQy9CLFlBQVksQ0FBRSxPQUNoQixDQUNBLGNBQWMsaUNBQWtCLENBQUMsNkJBQWUsQ0FDOUMsT0FBTyxDQUFFLFlBQVksQ0FDckIsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsR0FBRyxDQUFFLElBQ1AsQ0FDQSxjQUFjLGlDQUFrQixDQUFDLG9DQUFzQixDQUNyRCxXQUFXLENBQUUsTUFDZixDQUNBLDZCQUFjLENBQUMsa0NBQW9CLENBQ2pDLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLEtBQUssQ0FBRSxJQUFJLENBQ1gsR0FBRyxDQUFFLElBQ1AsQ0FDQSw2QkFBYyxDQUFDLGtDQUFtQixNQUFPLENBQ3ZDLFlBQVksQ0FBRSxJQUNoQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJCb290c3RyYXBUb2FzdC5zdmVsdGUiXX0= */");
}
var get_extra_slot_changes = (dirty) => ({});
var get_extra_slot_context = (ctx) => ({});
var get_close_icon_slot_changes_1 = (dirty) => ({});
var get_close_icon_slot_context_1 = (ctx) => ({});
var get_icon_slot_changes_1 = (dirty) => ({});
var get_icon_slot_context_1 = (ctx) => ({});
var get_close_icon_slot_changes = (dirty) => ({});
var get_close_icon_slot_context = (ctx) => ({});
var get_icon_slot_changes = (dirty) => ({});
var get_icon_slot_context = (ctx) => ({});
function create_if_block_5(ctx) {
  let div;
  let t0;
  let strong;
  let t1_value = (
    /*data*/
    ctx[1].title + ""
  );
  let t1;
  let t2;
  let button;
  let current;
  let mounted;
  let dispose;
  const icon_slot_template = (
    /*#slots*/
    ctx[5].icon
  );
  const icon_slot = create_slot(
    icon_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_icon_slot_context
  );
  const icon_slot_or_fallback = icon_slot || fallback_block_3(ctx);
  const close_icon_slot_template = (
    /*#slots*/
    ctx[5]["close-icon"]
  );
  const close_icon_slot = create_slot(
    close_icon_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_close_icon_slot_context
  );
  const close_icon_slot_or_fallback = close_icon_slot || fallback_block_2(ctx);
  const block = {
    c: function create() {
      div = element("div");
      if (icon_slot_or_fallback)
        icon_slot_or_fallback.c();
      t0 = space();
      strong = element("strong");
      t1 = text(t1_value);
      t2 = space();
      button = element("button");
      if (close_icon_slot_or_fallback)
        close_icon_slot_or_fallback.c();
      attr_dev(strong, "class", "st-toast-title svelte-1t011t6");
      add_location(strong, file2, 97, 6, 2935);
      attr_dev(button, "data-notification-btn", "");
      attr_dev(button, "class", "st-toast-close-btn svelte-1t011t6");
      attr_dev(button, "type", "button");
      attr_dev(button, "aria-label", "close");
      add_location(button, file2, 99, 6, 3052);
      attr_dev(div, "class", "st-toast-header svelte-1t011t6");
      add_location(div, file2, 30, 4, 628);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      if (icon_slot_or_fallback) {
        icon_slot_or_fallback.m(div, null);
      }
      append_dev(div, t0);
      append_dev(div, strong);
      append_dev(strong, t1);
      append_dev(div, t2);
      append_dev(div, button);
      if (close_icon_slot_or_fallback) {
        close_icon_slot_or_fallback.m(button, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          button,
          "click",
          /*onRemove*/
          ctx[2],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (icon_slot) {
        if (icon_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            icon_slot,
            icon_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              icon_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_icon_slot_changes
            ),
            get_icon_slot_context
          );
        }
      } else {
        if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*data*/
        2)) {
          icon_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if ((!current || dirty & /*data*/
      2) && t1_value !== (t1_value = /*data*/
      ctx2[1].title + ""))
        set_data_dev(t1, t1_value);
      if (close_icon_slot) {
        if (close_icon_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            close_icon_slot,
            close_icon_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              close_icon_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_close_icon_slot_changes
            ),
            get_close_icon_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(icon_slot_or_fallback, local);
      transition_in(close_icon_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon_slot_or_fallback, local);
      transition_out(close_icon_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      if (icon_slot_or_fallback)
        icon_slot_or_fallback.d(detaching);
      if (close_icon_slot_or_fallback)
        close_icon_slot_or_fallback.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_5.name,
    type: "if",
    source: "(30:2) {#if data.title}",
    ctx
  });
  return block;
}
function create_else_block_1(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1	s1,0.4,1,1S10.6,16,10,16z");
      add_location(path0, file2, 87, 13, 2534);
      attr_dev(path1, "d", "M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1s1,0.4,1,1S10.6,16,10,16z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file2, 89, 14, 2698);
      attr_dev(svg, "class", "st-toast-icon svelte-1t011t6");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 80, 10, 2325);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block_1.name,
    type: "else",
    source: "(80:8) {:else}",
    ctx
  });
  return block;
}
function create_if_block_8(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
      add_location(path0, file2, 71, 13, 2021);
      attr_dev(path1, "d", "M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file2, 73, 14, 2140);
      attr_dev(svg, "class", "st-toast-icon svelte-1t011t6");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 64, 10, 1812);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_8.name,
    type: "if",
    source: "(64:40) ",
    ctx
  });
  return block;
}
function create_if_block_7(ctx) {
  let svg;
  let path;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr_dev(path, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,7Zm4,17.12H12V21.88h2.88V15.12H13V12.88h4.13v9H20Z");
      add_location(path, file2, 59, 13, 1569);
      attr_dev(svg, "class", "st-toast-icon svelte-1t011t6");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 32 32");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 52, 10, 1360);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_7.name,
    type: "if",
    source: "(52:39) ",
    ctx
  });
  return block;
}
function create_if_block_6(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-4.9,0-9,4.1-9,9s4.1,9,9,9s9-4,9-9S15,1,10,1z M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
      add_location(path0, file2, 41, 12, 951);
      attr_dev(path1, "fill", "none");
      attr_dev(path1, "d", "M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file2, 44, 12, 1107);
      attr_dev(svg, "class", "st-toast-icon svelte-1t011t6");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 33, 10, 731);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_6.name,
    type: "if",
    source: "(33:8) {#if data.type === 'success'}",
    ctx
  });
  return block;
}
function fallback_block_3(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (
      /*data*/
      ctx2[1].type === "success"
    )
      return create_if_block_6;
    if (
      /*data*/
      ctx2[1].type === "info"
    )
      return create_if_block_7;
    if (
      /*data*/
      ctx2[1].type === "error"
    )
      return create_if_block_8;
    return create_else_block_1;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type(ctx2, dirty))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d: function destroy(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block_3.name,
    type: "fallback",
    source: "(32:24)          ",
    ctx
  });
  return block;
}
function fallback_block_2(ctx) {
  let svg;
  let path;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr_dev(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
      add_location(path, file2, 115, 12, 3494);
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "class", "bx--toast-notification__close-icon svelte-1t011t6");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 32 32");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 107, 10, 3253);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block_2.name,
    type: "fallback",
    source: "(107:32)            ",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let current;
  const icon_slot_template = (
    /*#slots*/
    ctx[5].icon
  );
  const icon_slot = create_slot(
    icon_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_icon_slot_context_1
  );
  const icon_slot_or_fallback = icon_slot || fallback_block_1(ctx);
  const block = {
    c: function create() {
      if (icon_slot_or_fallback)
        icon_slot_or_fallback.c();
    },
    m: function mount(target, anchor) {
      if (icon_slot_or_fallback) {
        icon_slot_or_fallback.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (icon_slot) {
        if (icon_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            icon_slot,
            icon_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              icon_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_icon_slot_changes_1
            ),
            get_icon_slot_context_1
          );
        }
      } else {
        if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*data*/
        2)) {
          icon_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(icon_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (icon_slot_or_fallback)
        icon_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(125:4) {#if !data.title}",
    ctx
  });
  return block;
}
function create_else_block2(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1	s1,0.4,1,1S10.6,16,10,16z");
      add_location(path0, file2, 181, 13, 5664);
      attr_dev(path1, "d", "M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1s1,0.4,1,1S10.6,16,10,16z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file2, 183, 14, 5828);
      attr_dev(svg, "class", "st-toast-icon svelte-1t011t6");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 174, 10, 5455);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block2.name,
    type: "else",
    source: "(174:8) {:else}",
    ctx
  });
  return block;
}
function create_if_block_4(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
      add_location(path0, file2, 165, 13, 5151);
      attr_dev(path1, "d", "M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file2, 167, 14, 5270);
      attr_dev(svg, "class", "st-toast-icon svelte-1t011t6");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 158, 10, 4942);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_4.name,
    type: "if",
    source: "(158:40) ",
    ctx
  });
  return block;
}
function create_if_block_3(ctx) {
  let svg;
  let path;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr_dev(path, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,7Zm4,17.12H12V21.88h2.88V15.12H13V12.88h4.13v9H20Z");
      add_location(path, file2, 153, 13, 4699);
      attr_dev(svg, "class", "st-toast-icon svelte-1t011t6");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 32 32");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 146, 10, 4490);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_3.name,
    type: "if",
    source: "(146:39) ",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-4.9,0-9,4.1-9,9s4.1,9,9,9s9-4,9-9S15,1,10,1z M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
      add_location(path0, file2, 135, 12, 4081);
      attr_dev(path1, "fill", "none");
      attr_dev(path1, "d", "M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file2, 138, 12, 4237);
      attr_dev(svg, "class", "st-toast-icon svelte-1t011t6");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 127, 10, 3861);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(127:8) {#if data.type === 'success'}",
    ctx
  });
  return block;
}
function fallback_block_1(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*data*/
      ctx2[1].type === "success"
    )
      return create_if_block_2;
    if (
      /*data*/
      ctx2[1].type === "info"
    )
      return create_if_block_3;
    if (
      /*data*/
      ctx2[1].type === "error"
    )
      return create_if_block_4;
    return create_else_block2;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d: function destroy(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block_1.name,
    type: "fallback",
    source: "(126:24)          ",
    ctx
  });
  return block;
}
function create_if_block2(ctx) {
  let button;
  let current;
  let mounted;
  let dispose;
  const close_icon_slot_template = (
    /*#slots*/
    ctx[5]["close-icon"]
  );
  const close_icon_slot = create_slot(
    close_icon_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_close_icon_slot_context_1
  );
  const close_icon_slot_or_fallback = close_icon_slot || fallback_block(ctx);
  const block = {
    c: function create() {
      button = element("button");
      if (close_icon_slot_or_fallback)
        close_icon_slot_or_fallback.c();
      attr_dev(button, "data-notification-btn", "");
      attr_dev(button, "class", "st-toast-close-btn svelte-1t011t6");
      attr_dev(button, "type", "button");
      attr_dev(button, "aria-label", "close");
      add_location(button, file2, 194, 6, 6162);
    },
    m: function mount(target, anchor) {
      insert_dev(target, button, anchor);
      if (close_icon_slot_or_fallback) {
        close_icon_slot_or_fallback.m(button, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          button,
          "click",
          /*onRemove*/
          ctx[2],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (close_icon_slot) {
        if (close_icon_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            close_icon_slot,
            close_icon_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              close_icon_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_close_icon_slot_changes_1
            ),
            get_close_icon_slot_context_1
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(close_icon_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(close_icon_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(button);
      if (close_icon_slot_or_fallback)
        close_icon_slot_or_fallback.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(194:4) {#if !data.title}",
    ctx
  });
  return block;
}
function fallback_block(ctx) {
  let svg;
  let path;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr_dev(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
      add_location(path, file2, 210, 12, 6604);
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "class", "bx--toast-notification__close-icon svelte-1t011t6");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 32 32");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file2, 202, 10, 6363);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(202:32)            ",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let div2;
  let t0;
  let div1;
  let t1;
  let span;
  let t2_value = (
    /*data*/
    ctx[1].description + ""
  );
  let t2;
  let t3;
  let t4;
  let div0;
  let div2_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*data*/
    ctx[1].title && create_if_block_5(ctx)
  );
  let if_block1 = !/*data*/
  ctx[1].title && create_if_block_1(ctx);
  let if_block2 = !/*data*/
  ctx[1].title && create_if_block2(ctx);
  const extra_slot_template = (
    /*#slots*/
    ctx[5].extra
  );
  const extra_slot = create_slot(
    extra_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_extra_slot_context
  );
  const block = {
    c: function create() {
      div2 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div1 = element("div");
      if (if_block1)
        if_block1.c();
      t1 = space();
      span = element("span");
      t2 = text(t2_value);
      t3 = space();
      if (if_block2)
        if_block2.c();
      t4 = space();
      div0 = element("div");
      if (extra_slot)
        extra_slot.c();
      attr_dev(span, "class", "st-toast-description svelte-1t011t6");
      add_location(span, file2, 192, 4, 6073);
      attr_dev(div0, "class", "st-toast-extra");
      add_location(div0, file2, 217, 4, 6803);
      attr_dev(div1, "class", "st-toast-body svelte-1t011t6");
      toggle_class(div1, "st-toast-no-title", !/*data*/
      ctx[1].title);
      add_location(div1, file2, 123, 2, 3700);
      attr_dev(div2, "class", div2_class_value = "st-toast bootstrap " + /*data*/
      (ctx[1].theme || /*theme*/
      ctx[0]) + " " + /*data*/
      (ctx[1].type || "info") + " svelte-1t011t6");
      attr_dev(div2, "role", "alert");
      attr_dev(div2, "aria-live", "assertive");
      attr_dev(div2, "aria-atomic", "true");
      add_location(div2, file2, 22, 0, 444);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div2, anchor);
      if (if_block0)
        if_block0.m(div2, null);
      append_dev(div2, t0);
      append_dev(div2, div1);
      if (if_block1)
        if_block1.m(div1, null);
      append_dev(div1, t1);
      append_dev(div1, span);
      append_dev(span, t2);
      append_dev(div1, t3);
      if (if_block2)
        if_block2.m(div1, null);
      append_dev(div1, t4);
      append_dev(div1, div0);
      if (extra_slot) {
        extra_slot.m(div0, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          div2,
          "click",
          /*onClick*/
          ctx[3],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*data*/
        ctx2[1].title
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*data*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_5(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div2, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!/*data*/
      ctx2[1].title) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*data*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div1, t1);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*data*/
      2) && t2_value !== (t2_value = /*data*/
      ctx2[1].description + ""))
        set_data_dev(t2, t2_value);
      if (!/*data*/
      ctx2[1].title) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*data*/
          2) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block2(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div1, t4);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (extra_slot) {
        if (extra_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            extra_slot,
            extra_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              extra_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_extra_slot_changes
            ),
            get_extra_slot_context
          );
        }
      }
      if (!current || dirty & /*data*/
      2) {
        toggle_class(div1, "st-toast-no-title", !/*data*/
        ctx2[1].title);
      }
      if (!current || dirty & /*data, theme*/
      3 && div2_class_value !== (div2_class_value = "st-toast bootstrap " + /*data*/
      (ctx2[1].theme || /*theme*/
      ctx2[0]) + " " + /*data*/
      (ctx2[1].type || "info") + " svelte-1t011t6")) {
        attr_dev(div2, "class", div2_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(extra_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(extra_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div2);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (extra_slot)
        extra_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("BootstrapToast", slots, ["icon", "close-icon", "extra"]);
  let { theme = "light" } = $$props;
  let { data = {} } = $$props;
  const onRemove = (e) => {
    e.stopPropagation();
    data.remove();
    if (typeof data.onRemove === "function")
      data.onRemove();
  };
  const onClick = () => {
    if (typeof data.onClick === "function")
      data.onClick();
  };
  const writable_props = ["theme", "data"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<BootstrapToast> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("theme" in $$props2)
      $$invalidate(0, theme = $$props2.theme);
    if ("data" in $$props2)
      $$invalidate(1, data = $$props2.data);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({ theme, data, onRemove, onClick });
  $$self.$inject_state = ($$props2) => {
    if ("theme" in $$props2)
      $$invalidate(0, theme = $$props2.theme);
    if ("data" in $$props2)
      $$invalidate(1, data = $$props2.data);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [theme, data, onRemove, onClick, $$scope, slots];
}
var BootstrapToast = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, { theme: 0, data: 1 }, add_css2);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "BootstrapToast",
      options,
      id: create_fragment2.name
    });
  }
  get theme() {
    throw new Error("<BootstrapToast>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set theme(value) {
    throw new Error("<BootstrapToast>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get data() {
    throw new Error("<BootstrapToast>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set data(value) {
    throw new Error("<BootstrapToast>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var BootstrapToast_default = BootstrapToast;

// node_modules/svelte-toasts/src/FlatToast.svelte
var file3 = "node_modules\\svelte-toasts\\src\\FlatToast.svelte";
function add_css3(target) {
  append_styles(target, "svelte-is9c7e", ".st-toast.svelte-is9c7e.svelte-is9c7e{display:flex;pointer-events:auto;width:320px;height:auto;padding-left:0.875rem;color:#fff;box-shadow:0 2px 6px 0 rgba(0, 0, 0, 0.2);position:relative;cursor:pointer}.st-toast.svelte-is9c7e .st-toast-icon.svelte-is9c7e{flex-shrink:0;margin-right:0.875rem;margin-top:0.875rem}.st-toast.svelte-is9c7e progress[value].svelte-is9c7e{appearance:none;display:block;width:100%;position:absolute;bottom:0;left:0;right:0;height:4px}.st-toast.dark.svelte-is9c7e.svelte-is9c7e{color:#fff;background:#393939}.st-toast.dark.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-bar{background-color:#393939}.st-toast.dark.svelte-is9c7e .st-toast-close-btn svg.svelte-is9c7e{fill:#fff}.st-toast.dark.svelte-is9c7e .st-toast-close-btn.svelte-is9c7e:focus{border:solid 1px #fff}.st-toast.dark.success.svelte-is9c7e.svelte-is9c7e{border-left:3px solid rgb(22, 163, 74)}.st-toast.dark.success.svelte-is9c7e .st-toast-icon.svelte-is9c7e{fill:rgb(22, 163, 74);color:#fff}.st-toast.dark.success.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-value{background-color:rgb(22, 163, 74)}.st-toast.dark.info.svelte-is9c7e.svelte-is9c7e{border-left:3px solid rgb(2, 132, 199)}.st-toast.dark.info.svelte-is9c7e .st-toast-icon.svelte-is9c7e{fill:rgb(2, 132, 199);color:#fff}.st-toast.dark.info.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-value{background-color:rgb(2, 132, 199)}.st-toast.dark.error.svelte-is9c7e.svelte-is9c7e{border-left:3px solid rgb(225, 29, 72)}.st-toast.dark.error.svelte-is9c7e .st-toast-icon.svelte-is9c7e{fill:rgb(225, 29, 72);color:#fff}.st-toast.dark.error.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-value{background-color:rgb(225, 29, 72)}.st-toast.dark.warning.svelte-is9c7e.svelte-is9c7e{border-left:3px solid rgb(202, 138, 4)}.st-toast.dark.warning.svelte-is9c7e .st-toast-icon.svelte-is9c7e{fill:rgb(202, 138, 4);color:#fff}.st-toast.dark.warning.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-value{background-color:rgb(202, 138, 4)}.st-toast.light.svelte-is9c7e.svelte-is9c7e{color:#161616;fill:#161616}.st-toast.light.success.svelte-is9c7e.svelte-is9c7e{border-left:3px solid rgb(22, 163, 74);background:rgba(22, 163, 74, 0.2)}.st-toast.light.success.svelte-is9c7e progress.svelte-is9c7e{background:rgba(22, 163, 74, 0.2)}.st-toast.light.success.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-bar{background-color:transparent}.st-toast.light.success.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-value{background-color:rgb(22, 163, 74)}.st-toast.light.success.svelte-is9c7e .st-toast-icon.svelte-is9c7e{fill:rgb(22, 163, 74)}.st-toast.light.success.svelte-is9c7e .st-toast-close-btn.svelte-is9c7e:focus{border:solid 1px rgb(22, 163, 74)}.st-toast.light.success.svelte-is9c7e.svelte-is9c7e::before{border-color:rgb(22, 163, 74);content:'';pointer-events:none;position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;filter:opacity(0.4);border-style:solid;border-width:1px 1px 1px 0}.st-toast.light.info.svelte-is9c7e.svelte-is9c7e{border-left:3px solid rgb(2, 132, 199);background:rgba(2, 132, 199, 0.2)}.st-toast.light.info.svelte-is9c7e progress.svelte-is9c7e{background:rgba(2, 132, 199, 0.2)}.st-toast.light.info.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-bar{background-color:transparent}.st-toast.light.info.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-value{background-color:rgb(2, 132, 199)}.st-toast.light.info.svelte-is9c7e .st-toast-icon.svelte-is9c7e{fill:rgb(2, 132, 199)}.st-toast.light.info.svelte-is9c7e .st-toast-close-btn.svelte-is9c7e:focus{border:solid 1px rgb(2, 132, 199)}.st-toast.light.info.svelte-is9c7e.svelte-is9c7e::before{border-color:rgb(2, 132, 199);content:'';pointer-events:none;position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;filter:opacity(0.4);border-style:solid;border-width:1px 1px 1px 0}.st-toast.light.error.svelte-is9c7e.svelte-is9c7e{border-left:3px solid rgb(225, 29, 72);background:rgba(225, 29, 72, 0.2)}.st-toast.light.error.svelte-is9c7e progress.svelte-is9c7e{background:rgba(225, 29, 72, 0.2)}.st-toast.light.error.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-bar{background-color:transparent}.st-toast.light.error.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-value{background-color:rgb(225, 29, 72)}.st-toast.light.error.svelte-is9c7e .st-toast-icon.svelte-is9c7e{fill:rgb(225, 29, 72)}.st-toast.light.error.svelte-is9c7e .st-toast-close-btn.svelte-is9c7e:focus{border:solid 1px rgb(225, 29, 72)}.st-toast.light.error.svelte-is9c7e.svelte-is9c7e::before{border-color:rgb(225, 29, 72);content:'';pointer-events:none;position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;filter:opacity(0.4);border-style:solid;border-width:1px 1px 1px 0}.st-toast.light.warning.svelte-is9c7e.svelte-is9c7e{border-left:3px solid rgb(202, 138, 4);background:rgba(202, 138, 4, 0.2)}.st-toast.light.warning.svelte-is9c7e progress.svelte-is9c7e{background:rgba(202, 138, 4, 0.2)}.st-toast.light.warning.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-bar{background-color:transparent}.st-toast.light.warning.svelte-is9c7e progress[value].svelte-is9c7e::-webkit-progress-value{background-color:rgb(202, 138, 4)}.st-toast.light.warning.svelte-is9c7e .st-toast-icon.svelte-is9c7e{fill:rgb(202, 138, 4)}.st-toast.light.warning.svelte-is9c7e .st-toast-close-btn.svelte-is9c7e:focus{border:solid 1px rgb(202, 138, 4)}.st-toast.light.warning.svelte-is9c7e.svelte-is9c7e::before{border-color:rgb(202, 138, 4);content:'';pointer-events:none;position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;filter:opacity(0.4);border-style:solid;border-width:1px 1px 1px 0}.st-toast-details.svelte-is9c7e.svelte-is9c7e{margin-top:0.875rem;margin-right:1rem;text-align:left;align-self:flex-start}.st-toast-details.svelte-is9c7e .st-toast-title.svelte-is9c7e{font-size:0.875rem;font-weight:600;line-height:1.125rem;letter-spacing:0.16px;font-weight:600;word-break:break-word;margin:0;outline:none}.st-toast-details.svelte-is9c7e .st-toast-description.svelte-is9c7e{font-size:0.875rem;font-weight:400;line-height:1.125rem;letter-spacing:0.16px;margin-top:0;margin-bottom:1rem;word-break:break-word}.st-toast-close-btn.svelte-is9c7e.svelte-is9c7e{outline:2px solid transparent;outline-offset:-2px;display:flex;align-items:center;justify-content:center;background-color:transparent;border:none;cursor:pointer;margin-left:auto;padding:0;height:3rem;width:3rem;min-height:3rem;min-width:3rem;transition:outline 110ms, background-color 110ms}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}
var get_close_icon_slot_changes2 = (dirty) => ({});
var get_close_icon_slot_context2 = (ctx) => ({});
var get_extra_slot_changes2 = (dirty) => ({});
var get_extra_slot_context2 = (ctx) => ({});
var get_icon_slot_changes2 = (dirty) => ({});
var get_icon_slot_context2 = (ctx) => ({});
function create_else_block3(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1	s1,0.4,1,1S10.6,16,10,16z");
      add_location(path0, file3, 99, 9, 2534);
      attr_dev(path1, "d", "M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1s1,0.4,1,1S10.6,16,10,16z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file3, 101, 10, 2690);
      attr_dev(svg, "class", "st-toast-icon svelte-is9c7e");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file3, 92, 6, 2353);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block3.name,
    type: "else",
    source: "(92:4) {:else}",
    ctx
  });
  return block;
}
function create_if_block_42(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
      add_location(path0, file3, 83, 9, 2085);
      attr_dev(path1, "d", "M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file3, 85, 10, 2196);
      attr_dev(svg, "class", "st-toast-icon svelte-is9c7e");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file3, 76, 6, 1904);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_42.name,
    type: "if",
    source: "(76:36) ",
    ctx
  });
  return block;
}
function create_if_block_32(ctx) {
  let svg;
  let path;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr_dev(path, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,7Zm4,17.12H12V21.88h2.88V15.12H13V12.88h4.13v9H20Z");
      add_location(path, file3, 71, 9, 1681);
      attr_dev(svg, "class", "st-toast-icon svelte-is9c7e");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 32 32");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file3, 64, 6, 1500);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_32.name,
    type: "if",
    source: "(64:35) ",
    ctx
  });
  return block;
}
function create_if_block_22(ctx) {
  let svg;
  let path0;
  let path1;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr_dev(path0, "d", "M10,1c-4.9,0-9,4.1-9,9s4.1,9,9,9s9-4,9-9S15,1,10,1z M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
      add_location(path0, file3, 53, 8, 1135);
      attr_dev(path1, "fill", "none");
      attr_dev(path1, "d", "M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
      attr_dev(path1, "data-icon-path", "inner-path");
      attr_dev(path1, "opacity", "0");
      add_location(path1, file3, 56, 8, 1279);
      attr_dev(svg, "class", "st-toast-icon svelte-is9c7e");
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 20 20");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file3, 45, 6, 947);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path0);
      append_dev(svg, path1);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_22.name,
    type: "if",
    source: "(45:4) {#if data.type === 'success'}",
    ctx
  });
  return block;
}
function fallback_block_12(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (
      /*data*/
      ctx2[1].type === "success"
    )
      return create_if_block_22;
    if (
      /*data*/
      ctx2[1].type === "info"
    )
      return create_if_block_32;
    if (
      /*data*/
      ctx2[1].type === "error"
    )
      return create_if_block_42;
    return create_else_block3;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type(ctx2, dirty))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d: function destroy(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block_12.name,
    type: "fallback",
    source: "(44:20)      ",
    ctx
  });
  return block;
}
function create_if_block_12(ctx) {
  let h3;
  let t_value = (
    /*data*/
    ctx[1].title + ""
  );
  let t;
  const block = {
    c: function create() {
      h3 = element("h3");
      t = text(t_value);
      attr_dev(h3, "class", "st-toast-title svelte-is9c7e");
      add_location(h3, file3, 112, 6, 2954);
    },
    m: function mount(target, anchor) {
      insert_dev(target, h3, anchor);
      append_dev(h3, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*data*/
      2 && t_value !== (t_value = /*data*/
      ctx2[1].title + ""))
        set_data_dev(t, t_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(h3);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_12.name,
    type: "if",
    source: "(112:4) {#if data.title}",
    ctx
  });
  return block;
}
function fallback_block2(ctx) {
  let svg;
  let path;
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr_dev(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
      add_location(path, file3, 135, 8, 3504);
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "class", "bx--toast-notification__close-icon svelte-is9c7e");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 32 32");
      attr_dev(svg, "aria-hidden", "true");
      add_location(svg, file3, 127, 6, 3295);
    },
    m: function mount(target, anchor) {
      insert_dev(target, svg, anchor);
      append_dev(svg, path);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(svg);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block2.name,
    type: "fallback",
    source: "(127:28)        ",
    ctx
  });
  return block;
}
function create_if_block3(ctx) {
  let progress_1;
  const block = {
    c: function create() {
      progress_1 = element("progress");
      set_style(
        progress_1,
        "height",
        /*data*/
        ctx[1].duration > 0 ? "4px" : 0
      );
      progress_1.value = /*$progress*/
      ctx[2];
      attr_dev(progress_1, "class", "svelte-is9c7e");
      add_location(progress_1, file3, 142, 4, 3699);
    },
    m: function mount(target, anchor) {
      insert_dev(target, progress_1, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*data*/
      2) {
        set_style(
          progress_1,
          "height",
          /*data*/
          ctx2[1].duration > 0 ? "4px" : 0
        );
      }
      if (dirty & /*$progress*/
      4) {
        prop_dev(
          progress_1,
          "value",
          /*$progress*/
          ctx2[2]
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(progress_1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block3.name,
    type: "if",
    source: "(142:2) {#if data.showProgress}",
    ctx
  });
  return block;
}
function create_fragment3(ctx) {
  let div2;
  let t0;
  let div1;
  let t1;
  let p;
  let t2_value = (
    /*data*/
    ctx[1].description + ""
  );
  let t2;
  let t3;
  let div0;
  let t4;
  let button;
  let t5;
  let div2_class_value;
  let current;
  let mounted;
  let dispose;
  const icon_slot_template = (
    /*#slots*/
    ctx[7].icon
  );
  const icon_slot = create_slot(
    icon_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    get_icon_slot_context2
  );
  const icon_slot_or_fallback = icon_slot || fallback_block_12(ctx);
  let if_block0 = (
    /*data*/
    ctx[1].title && create_if_block_12(ctx)
  );
  const extra_slot_template = (
    /*#slots*/
    ctx[7].extra
  );
  const extra_slot = create_slot(
    extra_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    get_extra_slot_context2
  );
  const close_icon_slot_template = (
    /*#slots*/
    ctx[7]["close-icon"]
  );
  const close_icon_slot = create_slot(
    close_icon_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    get_close_icon_slot_context2
  );
  const close_icon_slot_or_fallback = close_icon_slot || fallback_block2(ctx);
  let if_block1 = (
    /*data*/
    ctx[1].showProgress && create_if_block3(ctx)
  );
  const block = {
    c: function create() {
      div2 = element("div");
      if (icon_slot_or_fallback)
        icon_slot_or_fallback.c();
      t0 = space();
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t1 = space();
      p = element("p");
      t2 = text(t2_value);
      t3 = space();
      div0 = element("div");
      if (extra_slot)
        extra_slot.c();
      t4 = space();
      button = element("button");
      if (close_icon_slot_or_fallback)
        close_icon_slot_or_fallback.c();
      t5 = space();
      if (if_block1)
        if_block1.c();
      attr_dev(p, "class", "st-toast-description svelte-is9c7e");
      add_location(p, file3, 115, 4, 3014);
      attr_dev(div0, "class", "st-toast-extra");
      add_location(div0, file3, 116, 4, 3073);
      attr_dev(div1, "class", "st-toast-details svelte-is9c7e");
      add_location(div1, file3, 110, 2, 2896);
      attr_dev(button, "class", "st-toast-close-btn svelte-is9c7e");
      attr_dev(button, "type", "button");
      attr_dev(button, "aria-label", "close");
      add_location(button, file3, 120, 2, 3152);
      attr_dev(div2, "class", div2_class_value = "st-toast flat " + /*data*/
      (ctx[1].theme || /*theme*/
      ctx[0]) + " " + /*data*/
      (ctx[1].type || "info") + " svelte-is9c7e");
      attr_dev(div2, "role", "alert");
      attr_dev(div2, "aria-live", "assertive");
      attr_dev(div2, "aria-atomic", "true");
      add_location(div2, file3, 36, 0, 730);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div2, anchor);
      if (icon_slot_or_fallback) {
        icon_slot_or_fallback.m(div2, null);
      }
      append_dev(div2, t0);
      append_dev(div2, div1);
      if (if_block0)
        if_block0.m(div1, null);
      append_dev(div1, t1);
      append_dev(div1, p);
      append_dev(p, t2);
      append_dev(div1, t3);
      append_dev(div1, div0);
      if (extra_slot) {
        extra_slot.m(div0, null);
      }
      append_dev(div2, t4);
      append_dev(div2, button);
      if (close_icon_slot_or_fallback) {
        close_icon_slot_or_fallback.m(button, null);
      }
      append_dev(div2, t5);
      if (if_block1)
        if_block1.m(div2, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            button,
            "click",
            /*onRemove*/
            ctx[4],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div2,
            "click",
            /*onClick*/
            ctx[5],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (icon_slot) {
        if (icon_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            icon_slot,
            icon_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              icon_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              get_icon_slot_changes2
            ),
            get_icon_slot_context2
          );
        }
      } else {
        if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*data*/
        2)) {
          icon_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (
        /*data*/
        ctx2[1].title
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_12(ctx2);
          if_block0.c();
          if_block0.m(div1, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if ((!current || dirty & /*data*/
      2) && t2_value !== (t2_value = /*data*/
      ctx2[1].description + ""))
        set_data_dev(t2, t2_value);
      if (extra_slot) {
        if (extra_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            extra_slot,
            extra_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              extra_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              get_extra_slot_changes2
            ),
            get_extra_slot_context2
          );
        }
      }
      if (close_icon_slot) {
        if (close_icon_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            close_icon_slot,
            close_icon_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              close_icon_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              get_close_icon_slot_changes2
            ),
            get_close_icon_slot_context2
          );
        }
      }
      if (
        /*data*/
        ctx2[1].showProgress
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block3(ctx2);
          if_block1.c();
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & /*data, theme*/
      3 && div2_class_value !== (div2_class_value = "st-toast flat " + /*data*/
      (ctx2[1].theme || /*theme*/
      ctx2[0]) + " " + /*data*/
      (ctx2[1].type || "info") + " svelte-is9c7e")) {
        attr_dev(div2, "class", div2_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(icon_slot_or_fallback, local);
      transition_in(extra_slot, local);
      transition_in(close_icon_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon_slot_or_fallback, local);
      transition_out(extra_slot, local);
      transition_out(close_icon_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div2);
      if (icon_slot_or_fallback)
        icon_slot_or_fallback.d(detaching);
      if (if_block0)
        if_block0.d();
      if (extra_slot)
        extra_slot.d(detaching);
      if (close_icon_slot_or_fallback)
        close_icon_slot_or_fallback.d(detaching);
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let $progress;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("FlatToast", slots, ["icon", "extra", "close-icon"]);
  let { theme = "light" } = $$props;
  let { data = {} } = $$props;
  const progress = tweened(1, { duration: data.duration, easing: identity });
  validate_store(progress, "progress");
  component_subscribe($$self, progress, (value) => $$invalidate(2, $progress = value));
  onMount(() => {
    progress.set(0, { duration: data.duration });
  });
  const onRemove = (e) => {
    e.stopPropagation();
    data.remove();
    if (typeof data.onRemove === "function")
      data.onRemove();
  };
  const onClick = () => {
    if (typeof data.onClick === "function")
      data.onClick();
  };
  const writable_props = ["theme", "data"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<FlatToast> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("theme" in $$props2)
      $$invalidate(0, theme = $$props2.theme);
    if ("data" in $$props2)
      $$invalidate(1, data = $$props2.data);
    if ("$$scope" in $$props2)
      $$invalidate(6, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    onMount,
    tweened,
    linear: identity,
    theme,
    data,
    progress,
    onRemove,
    onClick,
    $progress
  });
  $$self.$inject_state = ($$props2) => {
    if ("theme" in $$props2)
      $$invalidate(0, theme = $$props2.theme);
    if ("data" in $$props2)
      $$invalidate(1, data = $$props2.data);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [theme, data, $progress, progress, onRemove, onClick, $$scope, slots];
}
var FlatToast = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, { theme: 0, data: 1 }, add_css3);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "FlatToast",
      options,
      id: create_fragment3.name
    });
  }
  get theme() {
    throw new Error("<FlatToast>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set theme(value) {
    throw new Error("<FlatToast>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get data() {
    throw new Error("<FlatToast>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set data(value) {
    throw new Error("<FlatToast>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var FlatToast_default = FlatToast;
export {
  BootstrapToast_default as BootstrapToast,
  FlatToast_default as FlatToast,
  ToastContainer_default as ToastContainer,
  toasts_default as toasts
};
//# sourceMappingURL=svelte-toasts.js.map
